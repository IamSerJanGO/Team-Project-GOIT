from SotedFileLogick import select_and_sort_folder
from tkinter import simpledialog
# from tkinter import messagebox
import tkinter as tk
from AdressBookLogick import AddressBook, Record, Phone, Email


def get_contact_info(info_type):
    contact_info = simpledialog.askstring("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞", f"–í–≤–µ–¥–∏—Ç–µ {info_type} (–µ—Å–ª–∏ –Ω–µ—Ç - –∑–∞–∫—Ä–æ–π –æ–∫–Ω–æ):")
    return contact_info if contact_info else None


def contact_name_request(name):
    contact = simpledialog.askstring('–í–≤–µ–¥–∏ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:', f'–í–≤–µ–¥–∏—Ç–µ {name}')
    return contact if contact else None


class CommandProcessorApp:
    def __init__(self, app, address_book):
        self.app = app
        self.address_book = address_book
        self.app.geometry("300x200")
        self.app.configure(bg="#F5F5DC")
        self.app.title("–¢–≤–æ–π –ø–æ–º–æ—à–Ω–∏–∫ üòä")

        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∫–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.input_label = tk.Label(app, text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n—Å–ø—Å–∏–æ–∫ –∫–æ–º–∞–Ω–¥", background='#F5F5DC')
        self.input_label.pack()

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.input_entry = tk.Entry(app)
        self.input_entry.pack()

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–í—ã–ø–æ–ª–Ω–∏—Ç—å" –∏ –ø—Ä–∏–≤—è–∑–∫–∞ –µ–µ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ execute_command
        self.submit_button = tk.Button(app, text="–í—ã–ø–æ–ª–Ω–∏—Ç—å", command=self.execute_command)
        self.submit_button.pack()

        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.result_label = tk.Label(app, text="")
        self.result_label.pack()

        self.app.protocol("WM_DELETE_WINDOW", self.on_closing)

        self.error_label = tk.Label(self.app, text="", foreground="red", background='#F5F5DC')
        self.error_label.pack()

    def process_command(self, command):
        # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
        if command == "sorted path":
            return select_and_sort_folder()
        elif command == 'add':
            return self.add_contact()
        elif command == 'find contact':
            return self.find_contact()
        elif command == 'check birthday':
            return self.birthday()
        elif command == 'search':
            return self.search_contact()
        elif command == 'delete':
            return self.delete_contact()
        elif command == 'add phone':
            return self.add_phone_to_contact()
        elif command == 'add address':
            return self.add_address()
        elif command == 'remove address':
            return self.remove_address_from_contact()
        elif command == 'edit address':
            return self.edit_address()
        elif command == 'remove phone':
            return self.remove_phone_in_contact()
        elif command == 'edit phone':
            return self.edit_phone_contact()
        elif command == 'find phone':
            return self.find_phone_contact()
        elif command == 'add email':
            return self.add_email()

    def find_contact(self):  # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        contact_name = contact_name_request('–ò–º—è')
        try:
            contact = address_book.find(contact_name)
            if contact:
                self.error_label.config(text="")
                return f'–ö–æ–Ω—Ç–∞–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—Å–∫–∞–ª–∏: {contact}'
            else:
                self.error_label.config(text=f'–ö–æ–Ω—Ç–∞–∫—Ç —Å –∏–º–µ–Ω–µ–º {contact_name} –Ω–µ –Ω–∞–π–¥–µ–Ω')
        except ValueError as e:
            self.error_label.config(text=str(e))

    def add_email(self):
        contact_name = simpledialog.askstring('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:')
        if contact_name:
            contact = self.address_book.find(contact_name)
            if contact:
                new_email = simpledialog.askstring('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å:')
                if new_email:
                    try:
                        contact.add_email(new_email)  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Email –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É
                        return f'–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å {new_email} –¥–ª—è {contact}.'
                    except ValueError as e:
                        self.error_label.config(text=str(e))
                else:
                    self.error_label.config(text='–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–æ–≤—ã–π –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å.')
            else:
                self.error_label.config(text=f'–ö–æ–Ω—Ç–∞–∫—Ç —Å –∏–º–µ–Ω–µ–º {contact_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        else:
            self.error_label.config(text='–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞.')

    def add_contact(self):  # –î–æ–±–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
        contact_name = simpledialog.askstring("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:")
        contact_phone = simpledialog.askstring("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞:")

        contact_mail = get_contact_info("–ø–æ—á—Ç—É –∫–æ–Ω—Ç–∞–∫—Ç–∞")
        contact_address = get_contact_info("–∞–¥—Ä–µ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞")
        contact_birthday = get_contact_info("–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞")

        try:
            contact = Record(contact_name, contact_phone, email=contact_mail, address=contact_address,
                             birthday=contact_birthday)
            self.address_book.add_record(contact)
        except ValueError:
            self.error_label.config(text="Invalid phone number.")
            return
        except ValueError as e:
            self.error_label.config(text=str(e))
            return
        self.error_label.config(text="")
        return f'–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: {contact_name} - {contact_phone}'

        # if contact_name and contact_phone: contact = Record(contact_name, contact_phone, email=contact_mail,
        # address=contact_address, birthday=contact_birthday) self.address_book.add_record(contact) return f'–í—ã
        # –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: {contact_name} - {contact_phone}'

    def add_phone_to_contact(self):
        contact_name = simpledialog.askstring("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:")
        if contact_name:
            contact = self.address_book.find(contact_name)
            if contact:
                phone_number = simpledialog.askstring("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
                try:
                    Phone(phone_number)
                    contact.add_phone(phone_number)
                    # self.error_label.config(text=f'–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è {contact_name}.')
                    return f'–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone_number} –¥–ª—è {contact_name}.'
                except ValueError as e:
                    self.error_label.config(text=str(e))
            else:
                self.error_label.config(text=f'–ö–æ–Ω—Ç–∞–∫—Ç —Å –∏–º–µ–Ω–µ–º {contact_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        else:
            self.error_label.config(text='–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞.')

    def edit_phone_contact(self):
        user_input = simpledialog.askstring('–í—ã–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞', '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:')
        if user_input:
            contact = self.address_book.find(user_input)
            if contact:
                if contact.phones:
                    old_phone = simpledialog.askstring('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞', '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
                    if old_phone:
                        new_phone = simpledialog.askstring('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞', '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
                        if new_phone:
                            try:
                                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–µ–Ω)
                                Phone(new_phone)
                                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —É –æ–±—ä–µ–∫—Ç–∞ contact
                                contact.phone.value = new_phone
                                return f'–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact.name}: {old_phone} -> {new_phone}'
                            except ValueError as e:
                                self.error_label.config(text=str(e))
                        else:
                            self.error_label.config(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')
                    else:
                        self.error_label.config(text='–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')
                else:
                    self.error_label.config(text=f'{contact} –Ω–µ –∏–º–µ–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
            else:
                self.error_label.config(text=f'–ö–æ–Ω—Ç–∞–∫—Ç {user_input} –Ω–µ –Ω–∞–π–¥–µ–Ω')
        else:
            self.error_label.config(text='–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞.')

    def remove_phone_in_contact(self):
        contact_name = simpledialog.askstring("–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:")
        if contact_name:
            contact = self.address_book.find(contact_name)
            if contact:
                removed_phone = simpledialog.askstring("–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                                                       f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact_name}:")
                try:
                    contact.remove_phone(removed_phone)
                    return f'–í—ã —É–¥–∞–ª–∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω "{removed_phone}" –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ "{contact_name}".'
                except ValueError as e:
                    self.error_label.config(text=str(e))
            else:
                self.error_label.config(text=f'–ö–æ–Ω—Ç–∞–∫—Ç —Å –∏–º–µ–Ω–µ–º {contact_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        else:
            self.error_label.config(text='–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞.')

    def find_phone_contact(self):
        user_input = simpledialog.askstring('–ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞', '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
        if user_input:
            contact = self.address_book.find_contact_with_phone(user_input)
            if contact:
                return f'–ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {user_input}: {contact.name}'
            else:
                return f'–ö–æ–Ω—Ç–∞–∫—Ç —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {user_input} –Ω–µ –Ω–∞–π–¥–µ–Ω.'
        else:
            self.error_label.config(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')

    def add_address(self):
        contact_name = simpledialog.askstring('–î–æ–±–∞–ª–≤–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞', '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:')
        if contact_name:
            contact = self.address_book.find(contact_name)
            if contact:
                contact_address = simpledialog.askstring('–î–æ–±–∞–ª–≤–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞', '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:')
                try:
                    contact.add_address(contact_address)
                    return f'–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –∞–¥—Ä–µ—Å {contact_address} –¥–ª—è {contact_name}.'
                except ValueError as e:
                    self.error_label.config(text=str(e))
            else:
                self.error_label.config(text=f'–ö–æ–Ω—Ç–∞–∫—Ç —Å –∏–º–µ–Ω–µ–º {contact_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        else:
            self.error_label.config(text='–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞.')

    def remove_address_from_contact(self):
        contact_name = simpledialog.askstring("–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:")
        if contact_name:
            contact = self.address_book.find(contact_name)
            if contact:
                if contact.address is not None:
                    removed_address = contact.address.value
                    contact.remove_address()
                    return f'–í—ã —É–¥–∞–ª–∏–ª–∏ –∞–¥—Ä–µ—Å "{removed_address}" –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ "{contact_name}".'
                else:
                    self.error_label.config(text=f'{contact_name} –Ω–µ –∏–º–µ–µ—Ç –∞–¥—Ä–µ—Å–∞.')
            else:
                self.error_label.config(text=f'–ö–æ–Ω—Ç–∞–∫—Ç —Å –∏–º–µ–Ω–µ–º {contact_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        else:
            self.error_label.config(text='–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞.')

    def edit_address(self):
        user_input = simpledialog.askstring('–í—ã–±–æ—Ä –∫–∞–æ–≥—Ç–∞–∫—Ç–∞', '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–µ:')
        if user_input:
            contact = self.address_book.find(user_input)
            if contact:
                if contact.address:
                    old_address = simpledialog.askstring('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞', '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –∞–¥—Ä–µ—Å:')
                    new_address = simpledialog.askstring('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞', '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:')
                    if old_address and new_address:
                        try:
                            contact.edit_address(old_address, new_address)
                            return f'–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –∞–¥—Ä–µ—Å —É –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact.name}: {old_address} -> {new_address}'
                        except ValueError as e:
                            self.error_label.config(text=str(e))
                    else:
                        self.error_label.config(text=f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏ —Å—Ç–∞—Ä—ã–π –∞–¥—Ä–µ—Å, –∏ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å.')
                else:
                    self.error_label.config(text=f'{contact} –Ω–µ –∏–º–µ–µ—Ç –∞–¥—Ä–µ—Å–∞')
            else:
                self.error_label.config(text=f'–ö–æ–Ω—Ç–∞–∫—Ç {contact} –Ω–µ –Ω–∞–π–¥–µ–Ω')
        else:
            self.error_label.config(text='–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∞–¥—Ä–µ—Å–∞')

    def delete_contact(self):
        user_input = simpledialog.askstring('–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞', '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:')
        if user_input:
            result = self.address_book.delete(user_input)
            if result:
                self.error_label.config(text=f'–í—ã —É–¥–∞–ª–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç: {result}')
            else:
                self.error_label.config(text='–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')

    def search_contact(self):
        user_input = simpledialog.askstring('–û–∫–Ω–æ –≤–≤–æ–¥–∞', "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        if user_input:
            matches = self.address_book.search(user_input)
            if matches:
                result = '–ù–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Ç–∞–∫–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö:\n'
                result += '\n'.join(str(record) for record in matches)
                return result
            else:
                return '–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'

    def birthday(self):
        try:
            days = int(simpledialog.askstring('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è', '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:'))
            if isinstance(days, int):
                upcoming_birthdays = self.address_book.days_to_birthday(days)
                if upcoming_birthdays:
                    return f'–°–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω—ñ –∑ —Ç–∞–∫–∏–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏:\n' + '\n'.join(upcoming_birthdays)
                else:
                    return '–ù–µ–º–∞—î –∑–±—ñ–≥—ñ–≤.'
            else:
                return f'{days} - –¥–æ—Ä–æ–≥–æ–π, –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.'
        except ValueError:
            return '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.'

    def execute_command(self):
        # –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–í—ã–ø–æ–ª–Ω–∏—Ç—å"
        user_input = self.input_entry.get()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤–∏–¥–∂–µ—Ç–∞ Entry
        result = self.process_command(user_input)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        self.result_label.config(text=result)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç Label —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º

    def on_closing(self):
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.address_book.save_to_file('address-book')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
        self.app.destroy()


if __name__ == "__main__":
    address_book = AddressBook()
    address_book.load_from_file('address-book')
    app = tk.Tk()
    command_processor = CommandProcessorApp(app, address_book)  # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞
    app.mainloop()  # –ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
