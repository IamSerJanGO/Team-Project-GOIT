from SotedFileLogick import select_and_sort_folder
from tkinter import simpledialog

# from tkinter import messagebox
import tkinter as tk
from AdressBookLogick import AddressBook, Record, Phone, Email
import NotesLogick as nl  # –∏–º–ø–æ—Ä—Ç –≤—Å–µ–≥–æ –º–æ–¥—É–ª—è, –∏–±–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–∞–º –Ω–µ –≤ –∫–ª–∞—Å—Å–µ


def get_contact_info(info_type):
    contact_info = simpledialog.askstring(
        "–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É", f"–í–≤–µ–¥—ñ—Ç—å {info_type} (—è–∫—â–æ –Ω—ñ - –∑–∞–∫—Ä–∏–π—Ç–µ –≤—ñ–∫–Ω–æ):"
    )
    return contact_info if contact_info else None


def contact_name_request(name):
    contact = simpledialog.askstring("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç—É:", f"–í–≤–µ–¥—ñ—Ç—å {name}")
    return contact if contact else None


class CommandProcessorApp:
    def __init__(
        self, app, address_book, notes_book
    ):  # –î–æ–±–∞–≤–∏–ª–∞ —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –≤ –∫–ª–∞—Å—Å
        self.app = app
        self.address_book = address_book
        self.notes_book = notes_book
        self.app.geometry("500x500")
        self.app.configure(bg="#F5F5DC")
        self.app.title("–¢–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ üòä")

        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∫–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        commands = [
            "add",
            "find contact",
            "check birthday",
            "search",
            "delete",
            "add phone",
            "add address",
            "remove address",
            "edit address",
            "remove phone",
            "edit phone",
            "find phone",
            "add email",
            "edit email",
            "remove email",
            "note",
            "search note",
            "edit note",
            "update note",
            "add tag",
            "with tag",
            "sort note",
            "remove note",
            "show note",
        ]

        descriptions = [
            "–î–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç",
            "–ó–Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞ —ñ–º'—è–º",
            "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è",
            "–ü–æ—à—É–∫",
            "–í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç",
            "–î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω",
            "–î–æ–¥–∞—Ç–∏ –∞–¥—Ä–µ—Å—É",
            "–í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥—Ä–µ—Å—É",
            "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–¥—Ä–µ—Å—É",
            "–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω",
            "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω",
            "–ó–Ω–∞–π—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω",
            "–î–æ–¥–∞—Ç–∏ –ø–æ—à—Ç—É",
            "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ—à—Ç—É",
            "–í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—à—Ç—É",
            "–î–æ–¥–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É",
            "–ü–æ—à—É–∫ –Ω–æ—Ç–∞—Ç–∫–∏",
            "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É",
            "–í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É",
            "–î–æ–¥–∞—Ç–∏ —Ç–µ–≥ –¥–æ –Ω–æ—Ç–∞—Ç–∫—É",
            "–ü–æ—à—É–∫ –Ω–æ—Ç–∞—Ç–∫—ñ–≤ –∑–∞ —Ç–µ–≥–æ–º",
            "–°–æ—Ä—Ç—É–≤–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫–∏",
            "–í–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É",
            "–ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫–∏",
        ]

        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫—É –¥–ª—è –ø–µ—Ä–µ—á–Ω—è –∫–æ–º–∞–Ω–¥
        commands_label = tk.Label(
            app, text="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:", background="#F5F5DC", justify="left"
        )
        commands_label.pack()

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ø–µ—Ä–µ—á–Ω—è –∫–æ–º–∞–Ω–¥ –∏ –æ–ø–∏—Å–∞–Ω–∏–π
        commands_text = tk.Text(
            app, wrap="word", height=10, width=40, background="#F5F5DC"
        )
        commands_text.pack()

        # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        for command, description in zip(commands, descriptions):
            commands_text.insert(tk.END, f"{command} - {description}\n")

        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã
        self.input_label = tk.Label(app, text="–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É:", background="#F5F5DC")
        self.input_label.pack()

        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.input_entry = tk.Entry(app)
        self.input_entry.pack()

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–ø–æ–ª–Ω–∏—Ç—å" –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –µ–µ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ execute_command
        self.submit_button = tk.Button(
            app, text="–í–∏–∫–æ–Ω–∞—Ç–∏", command=self.execute_command
        )
        self.submit_button.pack()

        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.result_label = tk.Label(app, text="")
        self.result_label.pack()

        self.app.protocol("WM_DELETE_WINDOW", self.on_closing)

        self.error_label = tk.Label(
            self.app, text="", foreground="red", background="#F5F5DC"
        )
        self.error_label.pack()

    def process_command(self, command):
        # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
        if command == "sorted path":
            return select_and_sort_folder()
        elif command == "add":
            return self.add_contact()
        elif command == "find contact":
            return self.find_contact()
        elif command == "check birthday":
            return self.birthday()
        elif command == "search":
            return self.search_contact()
        elif command == "delete":
            return self.delete_contact()
        elif command == "add phone":
            return self.add_phone_to_contact()
        elif command == "add address":
            return self.add_address()
        elif command == "remove address":
            return self.remove_address_from_contact()
        elif command == "edit address":
            return self.edit_address()
        elif command == "remove phone":
            return self.remove_phone_in_contact()
        elif command == "edit phone":
            return self.edit_phone_contact()
        elif command == "find phone":
            return self.find_phone_contact()
        elif command == "add email":
            return self.add_email()
        elif command == "edit email":
            return self.edit_email()
        elif command == "remove email":
            return self.remove_email_in_contact()
        # –ó–¥–µ—Å—å –¥–æ–±–∞–≤–∏–ª–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
        elif command == "note":
            return self.add_note()
        elif command == "search note":
            return self.search_note()
        elif command == "edit note":
            return self.edit_note()
        elif command == "update note":
            return self.update_note()
        elif command == "add tag":
            return self.add_tag()
        elif command == "with tag":
            return self.with_tag()
        elif command == "sort note":
            return self.sort_note()
        elif command == "remove note":
            return self.remove_note()
        elif command == "show note":
            return self.show_note()

    def show_note(self):  # –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
        return nl.show_all_notes(notes_book)

    def add_note(self):  # –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É
        title = simpledialog.askstring("–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫—É", "–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫:")
        content = simpledialog.askstring("–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫—É", "–í–≤–µ–¥—ñ—Ç—å –Ω–æ—Ç–∞—Ç–∫—É:")
        return nl.add_note(notes_book, content, title)

    def search_note(self):  # –∏—â–µ—Ç –∑–∞–º–µ—Ç–∫—É —Ä–∞–Ω–¥–æ–º–Ω–æ–º—É —Å–ª–æ–≤—É
        word = simpledialog.askstring("–ü–æ—à—É–∫ –Ω–æ—Ç–∞—Ç–∫–∏", "–í–≤–µ–¥—ñ—Ç—å –ø–æ—à—É–∫–æ–≤–µ —Å–ª–æ–≤–æ:")
        return nl.search_notes(notes_book, word)

    def edit_note(self):  # –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É, –Ω–∞—Ö–æ–¥—è –µ–µ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
        title = simpledialog.askstring("–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏", "–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫:")
        content = simpledialog.askstring("–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏", "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–æ—Ç–∞—Ç–∫—É:")
        return nl.edit_note(notes_book, title, content)

    def update_note(self):  # –¥–æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–º–µ—Ç–∫—É
        title = simpledialog.askstring("–î–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏", "–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫:")
        content = simpledialog.askstring("–î–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏", "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç:")
        return nl.add_existing_note(notes_book, title, content)

    def add_tag(self):  # –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç—ç–≥–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–º–µ—Ç–∫—É
        title = simpledialog.askstring(
            "–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–≥—É –¥–æ –Ω–æ—Ç–∞—Ç–∫–∏", "–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫:"
        )
        tag = simpledialog.askstring("–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–≥—É –¥–æ –Ω–æ—Ç–∞—Ç–∫–∏", "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–≥:")
        return nl.add_tag(notes_book, title, tag)

    def with_tag(self):  # –Ω–∞—Ö–æ–¥–∏—Ç –∑–∞–º–µ—Ç–∫—É –ø–æ —Ç—ç–≥—É, –ø–æ–∫–∞ —á—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø—Ä–∞–≤–∏–º –ø–æ–∑–∂–µ
        tag = simpledialog.askstring("–ü–æ—à—É–∫ –Ω–æ—Ç–∞—Ç–∫—ñ–≤ –∑–∞ —Ç–µ–≥–æ–º", "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–≥:")
        return nl.search_by_tag(notes_book, tag)

    def sort_note(self):  # —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –ø–æ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        return nl.sort_notes(notes_book)

    def remove_note(self):  # —É–¥–∞–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –ø–æ –µ–µ –∑–∞–≥–æ–ª–æ–≤–∫—É
        title = simpledialog.askstring("–í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏", "–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫:")
        return nl.remove_note(notes_book, title)

    def find_contact(self):  # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        contact_name = contact_name_request("–Ü–º'—è")
        try:
            contact = address_book.find(contact_name)
            if contact:
                self.error_label.config(text="")
                return f"–ö–æ–Ω—Ç–∞–∫—Ç, —è–∫–∏–π –≤–∏ —à—É–∫–∞–ª–∏: {contact}"
            else:
                self.error_label.config(
                    text=f"–ö–æ–Ω—Ç–∞–∫—Ç –∑ —ñ–º'—è–º {contact_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
                )
        except ValueError as e:
            self.error_label.config(text=str(e))

    def add_email(self):
        contact_name = simpledialog.askstring(
            "–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—à—Ç–æ–≤–æ—ó –∞–¥—Ä–µ—Å–∏", "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç—É:"
        )
        if contact_name:
            contact = self.address_book.find(contact_name)
            if contact:
                new_email = simpledialog.askstring(
                    "–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—à—Ç–æ–≤–æ—ó –∞–¥—Ä–µ—Å–∏", "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –ø–æ—à—Ç–æ–≤—É –∞–¥—Ä–µ—Å—É:"
                )
                if new_email:
                    try:
                        contact.add_email(
                            new_email
                        )  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Email –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É
                        return f"–í–∏ –¥–æ–¥–∞–ª–∏ –ø–æ—à—Ç–æ–≤—É –∞–¥—Ä–µ—Å—É {new_email} –¥–ª—è {contact}."
                    except ValueError as e:
                        self.error_label.config(text=str(e))
                else:
                    self.error_label.config(text="–í–∏ –Ω–µ –≤–≤–µ–ª–∏ –Ω–æ–≤—É –ø–æ—à—Ç–æ–≤—É –∞–¥—Ä–µ—Å—É.")
            else:
                self.error_label.config(
                    text=f"–ö–æ–Ω—Ç–∞–∫—Ç –∑ —ñ–º'—è–º {contact_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
                )
        else:
            self.error_label.config(text="–í–∏ –Ω–µ –≤–≤–µ–ª–∏ —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç—É.")

    def edit_email(self):
        user_input = simpledialog.askstring("–í–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–Ω–∏—Ö", "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç—É")
        if user_input:
            contact = self.address_book.find(user_input)
            if contact:
                if contact.emails:
                    old_email = simpledialog.askstring(
                        "–í–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–Ω–∏—Ö", "–í–≤–µ–¥—ñ—Ç—å —Å—Ç–∞—Ä—É –ø–æ—à—Ç—É"
                    )
                    if old_email:
                        new_email = simpledialog.askstring(
                            "–í–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–Ω–∏—Ö", "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –ø–æ—à—Ç—É"
                        )
                        if new_email:
                            try:
                                Email(new_email)
                                contact.edit_email(old_email, new_email)
                                return f"–í–∏ –∑–º—ñ–Ω–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É –∫–æ–Ω—Ç–∞–∫—Ç—É {contact.name}: {old_email} -> {new_email}"
                            except ValueError as e:
                                self.error_label.config(text=str(e))
                        else:
                            self.error_label.config(text="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –ø–æ—à—Ç–æ–≤—É –∞–¥—Ä–µ—Å—É.")
                    else:
                        self.error_label.config(text="–í–≤–µ–¥—ñ—Ç—å —Å—Ç–∞—Ä—É –ø–æ—à—Ç–æ–≤—É –∞–¥—Ä–µ—Å—É.")
                else:
                    self.error_label.config(text=f"{contact} –Ω–µ –º–∞—î –ø–æ—à—Ç–æ–≤–æ—ó –∞–¥—Ä–µ—Å–∏")
            else:
                self.error_label.config(text=f"–ö–æ–Ω—Ç–∞–∫—Ç {contact} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            self.error_label.config(text="–í–∏ –Ω–µ –≤–≤–µ–ª–∏ —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç—É.")

    def remove_email_in_contact(self):
        contact_name = simpledialog.askstring(
            "–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—à—Ç–∏", "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç—É:"
        )
        if contact_name:
            contact = self.address_book.find(contact_name)
            if contact:
                removed_email = simpledialog.askstring(
                    "–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—à—Ç–∏", f"–í–≤–µ–¥—ñ—Ç—å –ø–æ—à—Ç—É –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—É {contact_name}:"
                )
                try:
                    contact.remove_email(removed_email)
                    return f'–í–∏ –≤–∏–¥–∞–ª–∏–ª–∏ –ø–æ—à—Ç—É "{removed_email}" –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—É "{contact_name}".'
                except ValueError as e:
                    self.error_label.config(text=str(e))
            else:
                self.error_label.config(
                    text=f"–ö–æ–Ω—Ç–∞–∫—Ç –∑ —ñ–º'—è–º {contact_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
                )
        else:
            self.error_label.config(text="–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç—É.")

    def add_contact(self):
        contact_name = simpledialog.askstring(
            "–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É", "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç—É:"
        )
        contact_phone = simpledialog.askstring(
            "–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É", "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç—É:"
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        try:
            Phone(contact_phone)  # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–æ—Ä–º–∞—Ç–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç
        except ValueError as e:
            self.error_label.config(text=str(e))
            return

        contact_mail = get_contact_info("–ø–æ—à—Ç—É –∫–æ–Ω—Ç–∞–∫—Ç—É")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email
        if contact_mail is not None:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª email –∏–ª–∏ –Ω–∞–∂–∞–ª –û—Ç–º–µ–Ω–∞
            try:
                Email(
                    contact_mail
                )  # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–æ—Ä–º–∞—Ç–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç
            except ValueError as e:
                self.error_label.config(text=str(e))
                return
        else:
            contact_mail = None

        contact_address = get_contact_info("–∞–¥—Ä–µ—Å—É –∫–æ–Ω—Ç–∞–∫—Ç—É")
        contact_birthday = get_contact_info("–¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É")

        contact = Record(
            contact_name,
            contact_phone,
            email=contact_mail,
            address=contact_address,
            birthday=contact_birthday,
        )

        self.address_book.add_record(contact)

        return f"–í–∏ –¥–æ–¥–∞–ª–∏ –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–∞–∫—Ç: {contact_name} - {contact_phone}"

        # if contact_name and contact_phone: contact = Record(contact_name, contact_phone, email=contact_mail,
        # address=contact_address, birthday=contact_birthday) self.address_book.add_record(contact) return f'–í—ã
        # –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: {contact_name} - {contact_phone}'

    def add_phone_to_contact(self):
        contact_name = simpledialog.askstring(
            "–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É", "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç—É:"
        )
        if contact_name:
            contact = self.address_book.find(contact_name)
            if contact:
                phone_number = simpledialog.askstring(
                    "–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É", "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:"
                )
                try:
                    Phone(phone_number)
                    contact.add_phone(phone_number)
                    # self.error_label.config(text=f'–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è {contact_name}.')
                    return (
                        f"–í–∏ –¥–æ–¥–∞–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É {phone_number} –¥–ª—è {contact_name}."
                    )
                except ValueError as e:
                    self.error_label.config(text=str(e))
            else:
                self.error_label.config(
                    text=f"–ö–æ–Ω—Ç–∞–∫—Ç –∑ —ñ–º'—è–º {contact_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
                )
        else:
            self.error_label.config(text="–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç—É.")

    def edit_phone_contact(self):
        user_input = simpledialog.askstring("–í–∏–±—ñ—Ä –∫–æ–Ω—Ç–∞–∫—Ç—É", "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç—É:")
        if user_input:
            contact = self.address_book.find(user_input)
            if contact:
                if contact.phones:
                    old_phone = simpledialog.askstring(
                        "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É", "–í–≤–µ–¥—ñ—Ç—å —Å—Ç–∞—Ä–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:"
                    )
                    if old_phone:
                        new_phone = simpledialog.askstring(
                            "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É", "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:"
                        )
                        if new_phone:
                            try:
                                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–µ–Ω)
                                Phone(new_phone)
                                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —É –æ–±—ä–µ–∫—Ç–∞ contact
                                contact.edit_phone(old_phone,new_phone)
                                return f"–í–∏ –∑–º—ñ–Ω–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É –∫–æ–Ω—Ç–∞–∫—Ç—É {contact.name}: {old_phone} -> {new_phone}"
                            except ValueError as e:
                                self.error_label.config(text=str(e))
                        else:
                            self.error_label.config(
                                text="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É."
                            )
                    else:
                        self.error_label.config(text="–í–≤–µ–¥—ñ—Ç—å —Å—Ç–∞—Ä–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
                else:
                    self.error_label.config(text=f"{contact} –Ω–µ –º–∞—î —Ç–µ–ª–µ—Ñ–æ–Ω—É")
            else:
                self.error_label.config(text=f"–ö–æ–Ω—Ç–∞–∫—Ç {user_input} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            self.error_label.config(text="–í–∏ –Ω–µ –≤–≤–µ–ª–∏ —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç—É.")

    def remove_phone_in_contact(self):
        contact_name = simpledialog.askstring(
            "–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É", "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç—É:"
        )
        if contact_name:
            contact = self.address_book.find(contact_name)
            if contact:
                removed_phone = simpledialog.askstring(
                    "–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É",
                    f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—É {contact_name}:",
                )
                try:
                    contact.remove_phone(removed_phone)
                    return f'–í–∏ –≤–∏–¥–∞–ª–∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω "{removed_phone}" –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—É "{contact_name}".'
                except ValueError as e:
                    self.error_label.config(text=str(e))
            else:
                self.error_label.config(
                    text=f"–ö–æ–Ω—Ç–∞–∫—Ç –∑ —ñ–º'—è–º {contact_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
                )
        else:
            self.error_label.config(text="–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç—É.")

    def find_phone_contact(self):
        user_input = simpledialog.askstring(
            "–ü–æ—à—É–∫ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É", "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:"
        )
        if user_input:
            contact = self.address_book.find_contact_with_phone(user_input)
            if contact:
                return (
                    f"–ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç –∑ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É {user_input}: {contact.name}"
                )
            else:
                return f"–ö–æ–Ω—Ç–∞–∫—Ç –∑ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É {user_input} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        else:
            self.error_label.config(text="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.")

    def add_address(self):
        contact_name = simpledialog.askstring(
            "–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏", "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç—É:"
        )
        if contact_name:
            contact = self.address_book.find(contact_name)
            if contact:
                contact_address = simpledialog.askstring(
                    "–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏", "–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É:"
                )
                try:
                    contact.add_address(contact_address)
                    return f"–í–∏ –¥–æ–¥–∞–ª–∏ –∞–¥—Ä–µ—Å—É {contact_address} –¥–ª—è {contact_name}."
                except ValueError as e:
                    self.error_label.config(text=str(e))
            else:
                self.error_label.config(
                    text=f"–ö–æ–Ω—Ç–∞–∫—Ç –∑ —ñ–º'—è–º {contact_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
                )
        else:
            self.error_label.config(text="–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç—É.")

    def remove_address_from_contact(self):
        contact_name = simpledialog.askstring(
            "–í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏", "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç—É:"
        )
        if contact_name:
            contact = self.address_book.find(contact_name)
            if contact:
                if contact.address is not None:
                    removed_address = contact.address.value
                    contact.remove_address()
                    return f'–í–∏ –≤–∏–¥–∞–ª–∏–ª–∏ –∞–¥—Ä–µ—Å—É "{removed_address}" –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—É "{contact_name}".'
                else:
                    self.error_label.config(text=f"{contact_name} –Ω–µ –º–∞—î –∞–¥—Ä–µ—Å–∏.")
            else:
                self.error_label.config(
                    text=f"–ö–æ–Ω—Ç–∞–∫—Ç –∑ —ñ–º'—è–º {contact_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
                )
        else:
            self.error_label.config(text="–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç—É.")

    def edit_address(self):
        user_input = simpledialog.askstring("–í–∏–±—ñ—Ä –∫–æ–Ω—Ç–∞–∫—Ç—É", "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç—É:")
        if user_input:
            contact = self.address_book.find(user_input)
            if contact:
                if contact.address:
                    old_address = simpledialog.askstring(
                        "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏", "–í–≤–µ–¥—ñ—Ç—å —Å—Ç–∞—Ä—É –∞–¥—Ä–µ—Å—É:"
                    )
                    new_address = simpledialog.askstring(
                        "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏", "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É:"
                    )
                    if old_address and new_address:
                        try:
                            contact.edit_address(old_address, new_address)
                            return f"–í–∏ –∑–º—ñ–Ω–∏–ª–∏ –∞–¥—Ä–µ—Å—É —É –∫–æ–Ω—Ç–∞–∫—Ç—É {contact.name}: {old_address} -> {new_address}"
                        except ValueError as e:
                            self.error_label.config(text=str(e))
                    else:
                        self.error_label.config(
                            text=f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ —Å—Ç–∞—Ä—É, —ñ –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É."
                        )
                else:
                    self.error_label.config(text=f"{contact} –Ω–µ –º–∞—î –∞–¥—Ä–µ—Å–∏")
            else:
                self.error_label.config(text=f"–ö–æ–Ω—Ç–∞–∫—Ç {contact} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            self.error_label.config(text="–í–∏ –Ω–µ –≤–≤–µ–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∞–¥—Ä–µ—Å–∏")

    def delete_contact(self):
        user_input = simpledialog.askstring(
            "–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É", "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:"
        )
        if user_input:
            result = self.address_book.delete(user_input)
            if result:
                self.error_label.config(text=f"–í–∏ –≤–∏–¥–∞–ª–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç: {result}")
            else:
                self.error_label.config(text="–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    def search_contact(self):
        user_input = simpledialog.askstring("–í—ñ–∫–Ω–æ –≤–≤–æ–¥—É", "–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω–Ω—ñ –¥–ª—è –ø–æ—à—É–∫—É:")
        if user_input:
            matches = self.address_book.search(user_input)
            if matches:
                result = "–ó–Ω–∞–π–¥–µ–Ω—ñ –∑–±—ñ–≥–∏ –≤ —Ç–∞–∫–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö:\n"
                result += "\n".join(str(record) for record in matches)
                return result
            else:
                return "–ó–±—ñ–≥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    def birthday(self):
        try:
            days = int(
                simpledialog.askstring(
                    "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è", "–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤:"
                )
            )
            if isinstance(days, int):
                upcoming_birthdays = self.address_book.days_to_birthday(days)
                if upcoming_birthdays:
                    return f"–ó–±—ñ–≥–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ –∑ —Ç–∞–∫–∏–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏:\n" + "\n".join(
                        upcoming_birthdays
                    )
                else:
                    return "–ù–µ–º–∞—î –∑–±—ñ–≥—ñ–≤."
            else:
                return f"{days} - –¥—Ä—É–∂–µ, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ —É —á–∏—Å–ª–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ."
        except ValueError:
            return (
                "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω—è. –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ —É —á–∏—Å–ª–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ."
            )

    def execute_command(self):
        # –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–í—ã–ø–æ–ª–Ω–∏—Ç—å"
        user_input = self.input_entry.get()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤–∏–¥–∂–µ—Ç–∞ Entry
        result = self.process_command(user_input)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        self.result_label.config(text=result)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç Label —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º

    def on_closing(self):
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.address_book.save_to_file("address-book")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
        nl.send_to_system(self.notes_book, "notes-book")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
        self.app.destroy()


if __name__ == "__main__":
    import os
    import atexit

    data_folder = "data"
    if not os.path.exists(data_folder):
        os.mkdir(data_folder)

    address_book = AddressBook()
    notes_book = nl.NotesBook()
    address_book_file = os.path.join(data_folder, "address-book")
    notes_book_file = os.path.join(data_folder, "notes-book")

    address_book.load_from_file(address_book_file)
    nl.get_from_system(notes_book, notes_book_file)

    app = tk.Tk()
    command_processor = CommandProcessorApp(app, address_book, notes_book)
    app.protocol("WM_DELETE_WINDOW", app.quit)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    def save_data():
        address_book.save_to_file(address_book_file)
        nl.send_to_system(notes_book, notes_book_file)

    atexit.register(save_data)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ

    app.mainloop()
